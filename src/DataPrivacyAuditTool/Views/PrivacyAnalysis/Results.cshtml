@using DataPrivacyAuditTool.Core.Models
@model DataPrivacyAuditTool.Core.Models.ViewModels.PrivacyDashboardViewModel

@{
    ViewData["Title"] = "Privacy Analysis Results";
    
    // Determine badge color for risk levels
    string GetRiskBadgeColor(RiskLevel riskLevel)
    {
        return riskLevel switch
        {
            RiskLevel.Critical => "danger",
            RiskLevel.High => "danger",
            RiskLevel.Medium => "warning",
            _ => "success"
        };
    }
}

<div class="container-fluid mt-4">
    <div class="row">
        <div class="col-12 col-lg-10 offset-lg-1">
            @if (Model?.AnalysisResult == null)
            {
                <div class="alert alert-warning">
                    <i class="fas fa-exclamation-triangle me-2"></i>
                    No analysis results available. Please upload your files again.
                </div>
            }
            else 
            {
                <div class="card mb-4">
                    <div class="card-header bg-primary text-white">
                        <h2 class="mb-0">Privacy Analysis Results</h2>
                    </div>
                    <div class="card-body">
                        @if (Model.AnalysisResult.IsPartialAnalysis)
                        {
                            <div class="alert alert-warning">
                                <i class="fas fa-exclamation-triangle me-2"></i>
                                <strong>Partial Analysis:</strong> @Model.AnalysisResult.PartialAnalysisMessage
                            </div>
                        }
                        
                        <div class="row">
                            <div class="col-md-4">
                                <div class="card mb-3">
                                    <div class="card-body text-center">
                                        <h5 class="text-muted">Overall Privacy Score</h5>
                                        <canvas id="scoreGaugeChart" height="200"></canvas>
                                        <div class="display-4 mt-3" style="color: @Model.OverallScore.Color">
                                            @Model.OverallScore.Value
                                        </div>
                                        <p class="text-muted mt-2">
                                            Analysis performed on @Model.AnalysisResult.AnalysisDate.ToString("MMM d, yyyy")
                                        </p>
                                    </div>
                                </div>
                            </div>
                            
                            <div class="col-md-8">
                                <h4>Top Recommendations</h4>
                                <div class="list-group">
                                    @if (!Model.TopRecommendations.Any())
                                    {
                                        <div class="list-group-item">
                                            <p class="mb-0">No specific recommendations at this time.</p>
                                        </div>
                                    }
                                    else 
                                    {
                                        @foreach (var recommendation in Model.TopRecommendations)
                                        {
                                            <div class="list-group-item">
                                                <div class="d-flex w-100 justify-content-between">
                                                    <h5 class="mb-1">@recommendation.Name</h5>
                                                    <span class="badge bg-@GetRiskBadgeColor(recommendation.RiskLevel)">
                                                        @recommendation.RiskLevel
                                                    </span>
                                                </div>
                                                <p class="mb-1">@recommendation.Recommendation</p>
                                            </div>
                                        }
                                    }
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <div class="row mb-4">
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h4 class="mb-0">Category Scores</h4>
                            </div>
                            <div class="card-body">
                                <canvas id="categoryRadarChart" height="300"></canvas>
                            </div>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="card h-100">
                            <div class="card-header">
                                <h4 class="mb-0">Risk Breakdown</h4>
                            </div>
                            <div class="card-body">
                                <canvas id="riskDonutChart" height="300"></canvas>
                            </div>
                        </div>
                    </div>
                </div>

                @if (Model.AnalysisResult.Categories?.Any() == true)
                {
                    @foreach (var category in Model.AnalysisResult.Categories)
                    {
                        <div class="card mb-4">
                            <div class="card-header">
                                <h3 class="mb-0">@category.Name</h3>
                                <p class="text-muted mb-0">@category.Description</p>
                            </div>
                            <div class="card-body">
                                <div class="table-responsive">
                                    <table class="table table-hover">
                                        <thead>
                                            <tr>
                                                <th>Metric</th>
                                                <th>Value</th>
                                                <th>Risk Level</th>
                                                <th>Description</th>
                                                <th>Recommendation</th>
                                            </tr>
                                        </thead>
                                        <tbody>
                                            @foreach (var metric in category.Metrics ?? Enumerable.Empty<PrivacyMetric>())
                                            {
                                                <tr>
                                                    <td><strong>@metric.Name</strong></td>
                                                    <td>@metric.Value</td>
                                                    <td>
                                                        <span class="badge bg-@GetRiskBadgeColor(metric.RiskLevel)">
                                                            @metric.RiskLevel
                                                        </span>
                                                    </td>
                                                    <td>@metric.Description</td>
                                                    <td>@metric.Recommendation</td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </div>
                    }
                }
                else
                {
                    <div class="alert alert-info">
                        <i class="fas fa-info-circle me-2"></i>
                        No privacy metrics were found during the analysis.
                    </div>
                }
            }
        </div>
    </div>
</div>

@section Scripts {
    @if (Model?.AnalysisResult != null)
    {
        <script>
            document.addEventListener('DOMContentLoaded', function() {
                // Prepare data for charts
                const categoryLabels = @Json.Serialize(Model.CategoryScores.Select(c => c.Label));
                const categoryValues = @Json.Serialize(Model.CategoryScores.Select(c => c.Value));
                const categoryColors = @Json.Serialize(Model.CategoryScores.Select(c => c.Color));
                
                const riskLabels = @Json.Serialize(Model.RiskBreakdown.Select(r => r.RiskLevel));
                const riskCounts = @Json.Serialize(Model.RiskBreakdown.Select(r => r.Count));
                const riskColors = @Json.Serialize(Model.RiskBreakdown.Select(r => r.Color));
                
                const overallScore = @Json.Serialize(Model.OverallScore.Value);
                const scoreColor = @Json.Serialize(Model.OverallScore.Color);
                
                // Radar Chart for Category Scores
                new Chart(document.getElementById('categoryRadarChart'), {
                    type: 'radar',
                    data: {
                        labels: categoryLabels,
                        datasets: [{
                            label: 'Privacy Score',
                            data: categoryValues,
                            backgroundColor: 'rgba(54, 162, 235, 0.2)',
                            borderColor: 'rgba(54, 162, 235, 1)',
                            pointBackgroundColor: categoryColors,
                            pointBorderColor: '#fff',
                            pointHoverBackgroundColor: '#fff',
                            pointHoverBorderColor: 'rgba(54, 162, 235, 1)'
                        }]
                    },
                    options: {
                        scales: {
                            r: {
                                angleLines: {
                                    display: true
                                },
                                beginAtZero: true,
                                min: 0,
                                max: 100,
                                ticks: {
                                    stepSize: 20
                                }
                            }
                        },
                        plugins: {
                            legend: {
                                position: 'top',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        return context.raw + '/100';
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Donut Chart for Risk Breakdown
                new Chart(document.getElementById('riskDonutChart'), {
                    type: 'doughnut',
                    data: {
                        labels: riskLabels,
                        datasets: [{
                            data: riskCounts,
                            backgroundColor: riskColors,
                            hoverOffset: 4
                        }]
                    },
                    options: {
                        responsive: true,
                        plugins: {
                            legend: {
                                position: 'right',
                            },
                            tooltip: {
                                callbacks: {
                                    label: function(context) {
                                        const label = context.label || '';
                                        const value = context.raw || 0;
                                        const total = context.dataset.data.reduce((a, b) => a + b, 0);
                                        const percentage = Math.round((value / total) * 100);
                                        return `${label}: ${value} (${percentage}%)`;
                                    }
                                }
                            }
                        }
                    }
                });
                
                // Gauge Chart for Overall Score
                new Chart(document.getElementById('scoreGaugeChart'), {
                    type: 'doughnut',
                    data: {
                        datasets: [{
                            data: [overallScore, 100 - overallScore],
                            backgroundColor: [
                                scoreColor,
                                '#e9ecef'
                            ],
                            borderWidth: 0
                        }]
                    },
                    options: {
                        circumference: 180,
                        rotation: -90,
                        cutout: '80%',
                        plugins: {
                            legend: {
                                display: false
                            },
                            tooltip: {
                                enabled: false
                            }
                        }
                    }
                });
            });
        </script>
    }
}
