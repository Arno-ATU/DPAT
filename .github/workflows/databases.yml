name: Database Operations

on:
  push:
    branches: [development, staging, main]
    paths:
      - 'src/DataPrivacyAuditTool/**/*.db'
      - '.github/workflows/databases.yml'
  workflow_dispatch:  # Allow manual triggering for testing

jobs:
  database-operations:
    runs-on: ubuntu-latest
    steps:
      - name: Checkout repository
        uses: actions/checkout@v4
        
      - name: Determine environment
        id: environment
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/main" ]]; then
            echo "env_name=production" >> $GITHUB_OUTPUT
            echo "db_file=dpat_production.db" >> $GITHUB_OUTPUT
          elif [[ "${{ github.ref }}" == "refs/heads/staging" ]]; then
            echo "env_name=staging" >> $GITHUB_OUTPUT
            echo "db_file=dpat_staging.db" >> $GITHUB_OUTPUT
          else
            echo "env_name=development" >> $GITHUB_OUTPUT
            echo "db_file=dpat_development.db" >> $GITHUB_OUTPUT
          fi
          
      - name: Find database file
        id: find-db
        run: |
          # Search for the database file
          DB_FILES=$(find . -name "${{ steps.environment.outputs.db_file }}" -type f)
          if [ -z "$DB_FILES" ]; then
            echo "No database files found matching ${{ steps.environment.outputs.db_file }}"
            echo "db_found=false" >> $GITHUB_OUTPUT
          else
            echo "Found database files:"
            echo "$DB_FILES"
            # Take the first match
            DB_PATH=$(echo "$DB_FILES" | head -n 1)
            echo "db_path=$DB_PATH" >> $GITHUB_OUTPUT
            echo "db_found=true" >> $GITHUB_OUTPUT
          fi
      
      - name: Install SQLite
        run: sudo apt-get update && sudo apt-get install -y sqlite3
      
      - name: Validate database
        if: steps.find-db.outputs.db_found == 'true'
        run: |
          echo "Validating database for ${{ steps.environment.outputs.env_name }} environment"
          echo "Database path: ${{ steps.find-db.outputs.db_path }}"
          
          # Perform basic SQLite check
          if sqlite3 "${{ steps.find-db.outputs.db_path }}" "PRAGMA integrity_check;" | grep -q "ok"; then
            echo "✅ Database integrity check passed"
          else
            echo "❌ Database integrity check failed"
            exit 1
          fi
          
          # Run a simple query to verify we can access data
          echo "Running test query:"
          sqlite3 "${{ steps.find-db.outputs.db_path }}" "SELECT name FROM sqlite_master WHERE type='table';"
      
      - name: Create backup
        if: steps.find-db.outputs.db_found == 'true'
        run: |
          echo "Creating backup for ${{ steps.environment.outputs.env_name }} database"
          mkdir -p ./backups
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          BACKUP_FILE="./backups/${{ steps.environment.outputs.db_file }}_backup_${TIMESTAMP}.db"
          cp "${{ steps.find-db.outputs.db_path }}" "$BACKUP_FILE"
          echo "Backup created at: $BACKUP_FILE"
          ls -la ./backups/
      
      - name: Upload backup artifact
        if: steps.find-db.outputs.db_found == 'true'
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.environment.outputs.env_name }}-database-backup
          path: ./backups/${{ steps.environment.outputs.db_file }}_backup_*.db
          retention-days: 7
          
      - name: Generate environment-specific report
        run: |
          mkdir -p ./reports
          TIMESTAMP=$(date +"%Y%m%d_%H%M%S")
          
          if [ "${{ steps.find-db.outputs.db_found }}" == "true" ]; then
            # Get database statistics
            TABLE_COUNT=$(sqlite3 "${{ steps.find-db.outputs.db_path }}" "SELECT count(*) FROM sqlite_master WHERE type='table';")
            DB_SIZE=$(ls -lh "${{ steps.find-db.outputs.db_path }}" | awk '{print $5}')
            
            cat > "./reports/${{ steps.environment.outputs.env_name }}_report_${TIMESTAMP}.md" << EOF
          # Database Operations Report: ${{ steps.environment.outputs.env_name }}
          
          **Date:** $(date -u "+%Y-%m-%d %H:%M:%S UTC")
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Database Details
          - **File:** ${{ steps.environment.outputs.db_file }}
          - **Size:** ${DB_SIZE}
          - **Tables:** ${TABLE_COUNT}
          - **Status:** ✅ Valid
          
          ## Operations Performed
          - Database integrity check completed successfully
          - Backup created and stored as artifact
          
          This report was automatically generated by the Database Operations workflow.
          EOF
          else
            cat > "./reports/${{ steps.environment.outputs.env_name }}_report_${TIMESTAMP}.md" << EOF
          # Database Operations Report: ${{ steps.environment.outputs.env_name }}
          
          **Date:** $(date -u "+%Y-%m-%d %H:%M:%S UTC")
          **Branch:** ${{ github.ref_name }}
          **Commit:** ${{ github.sha }}
          
          ## Database Details
          - **File:** ${{ steps.environment.outputs.db_file }}
          - **Status:** ⚠️ Not found
          
          ## Operations Performed
          - No database operations performed (database file not found)
          
          This report was automatically generated by the Database Operations workflow.
          EOF
          fi
          
          echo "Report generated at: ./reports/${{ steps.environment.outputs.env_name }}_report_${TIMESTAMP}.md"
      
      - name: Upload report artifact
        uses: actions/upload-artifact@v4
        with:
          name: ${{ steps.environment.outputs.env_name }}-database-report
          path: ./reports/${{ steps.environment.outputs.env_name }}_report_*.md
          retention-days: 7
