name: Code Quality

on:
  pull_request:
    branches: [development, staging, main]
  push:
    branches: [development]
    paths:
      - '**/*.cs'
      - '**/*.cshtml'
      - '**/*.csproj'

jobs:
  analyze:
    name: Analyze Code Quality
    runs-on: ubuntu-latest
    steps:
      - name: Set up JDK 21
        uses: actions/setup-java@v3
        with:
          java-version: 21
          distribution: 'zulu'
      
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Shallow clones should be disabled for better relevancy of analysis
      
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: '9.0'
      
      - name: Cache SonarCloud packages
        uses: actions/cache@v3
        with:
          path: ~\sonar\cache
          key: ${{ runner.os }}-sonar
          restore-keys: ${{ runner.os }}-sonar
      
      - name: Cache SonarCloud scanner
        id: cache-sonar-scanner
        uses: actions/cache@v3
        with:
          path: .\.sonar\scanner
          key: ${{ runner.os }}-sonar-scanner
          restore-keys: ${{ runner.os }}-sonar-scanner
      
      - name: Install SonarCloud scanner
        if: steps.cache-sonar-scanner.outputs.cache-hit != 'true'
        run: |
          dotnet tool install --global dotnet-sonarscanner
      
      - name: Install dotnet-coverage
        run: dotnet tool install --global dotnet-coverage
      
      - name: Begin SonarCloud analysis
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}  # Needed to get PR information
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}    # Generated from SonarCloud account
        run: |
          dotnet sonarscanner begin /k:"DPAT" \
            /o:"your-organization" \
            /d:sonar.login="${{ secrets.SONAR_TOKEN }}" \
            /d:sonar.host.url="https://sonarcloud.io" \
            /d:sonar.cs.dotcover.reportsPaths=coverage.xml \
            /d:sonar.cpd.cs.minimumLines=6 \
            /d:sonar.cpd.cs.minimumTokens=50 \
            /d:sonar.qualitygate.wait=true
      
      - name: Build and analyze
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          SONAR_TOKEN: ${{ secrets.SONAR_TOKEN }}
        run: |
          dotnet build --no-incremental
          dotnet-coverage collect 'dotnet test' -f xml -o 'coverage.xml'
          dotnet sonarscanner end /d:sonar.login="${{ secrets.SONAR_TOKEN }}"
      
      - name: Check code formatting
        run: |
          dotnet tool install --global dotnet-format
          dotnet format --verify-no-changes --verbosity diagnostic
